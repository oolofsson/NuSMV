MODULE main
VAR
  location : array 0..3 of boolean;
  traveling: array 0..3 of boolean;
  torch: boolean;
  time: 0..100;

ASSIGN
  init (location[0]) := FALSE;
  init (location[1]) := FALSE;
  init (location[2]) := FALSE;
  init (location[3]) := FALSE;
  init (torch) := FALSE;
  init (time) := 0;

  next (torch) := case
    -- rule: torch can only move if carried
    location[0] = torch & traveling[0]: !torch;
    location[1] = torch & traveling[1]: !torch;
    location[2] = torch & traveling[2]: !torch;
    location[3] = torch & traveling[3]: !torch;
    TRUE: torch;
  esac;

  next (location[0]) := case
    traveling[0] = TRUE & location[0] = torch: !location[0]; 
    -- rule: location changes if "0" is traveling
    TRUE: location[0];
  esac;

  next (location[1]) := case
    traveling[1] = TRUE & location[1] = torch: !location[1]; 
    -- copy rule from above and change index
    TRUE: location[1];
  esac;

  next (location[2]) := case
    traveling[2] = TRUE & location[2] = torch: !location[2]; 
    TRUE: location[2];
  esac;

  next (location[3]) := case
    traveling[3] = TRUE & location[3] = torch: !location[3]; 
    TRUE: location[3];
  esac;

  next(time) := case
    time > 90: 90;
    traveling[3]: time + 10;
    traveling[2]: time + 5;
    traveling[1]: time + 2;
    traveling[0]: time + 1;
    TRUE: time;
  esac;

LTLSPEC
  !((count(traveling[0], traveling[1], traveling[2], traveling[3]) <= 2)
     U (location[0] & location[1] & location[2] & location[3] &
        time <= 17));
